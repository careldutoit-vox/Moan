#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MaonWebApp.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MOAN")]
	public partial class MoanLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNag(Nag instance);
    partial void UpdateNag(Nag instance);
    partial void DeleteNag(Nag instance);
    partial void InsertBlogReview(BlogReview instance);
    partial void UpdateBlogReview(BlogReview instance);
    partial void DeleteBlogReview(BlogReview instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertBlog(Blog instance);
    partial void UpdateBlog(Blog instance);
    partial void DeleteBlog(Blog instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertRank(Rank instance);
    partial void UpdateRank(Rank instance);
    partial void DeleteRank(Rank instance);
    partial void InsertPostalCode(PostalCode instance);
    partial void UpdatePostalCode(PostalCode instance);
    partial void DeletePostalCode(PostalCode instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    #endregion
		
		public MoanLinqDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MOANConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MoanLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoanLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoanLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoanLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Nag> Nags
		{
			get
			{
				return this.GetTable<Nag>();
			}
		}
		
		public System.Data.Linq.Table<BlogReview> BlogReviews
		{
			get
			{
				return this.GetTable<BlogReview>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Blog> Blogs
		{
			get
			{
				return this.GetTable<Blog>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Rank> Ranks
		{
			get
			{
				return this.GetTable<Rank>();
			}
		}
		
		public System.Data.Linq.Table<PostalCode> PostalCodes
		{
			get
			{
				return this.GetTable<PostalCode>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
	}
	
	[Table(Name="dbo.Nags")]
	public partial class Nag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _NagsID;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private string _Description;
		
		private System.Nullable<int> _CategoryID;
		
		private string _Content;
		
		private System.Nullable<bool> _PosorNeg;
		
		private System.Nullable<long> _LoginID;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Login> _Login;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNagsIDChanging(long value);
    partial void OnNagsIDChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPosorNegChanging(System.Nullable<bool> value);
    partial void OnPosorNegChanged();
    partial void OnLoginIDChanging(System.Nullable<long> value);
    partial void OnLoginIDChanged();
    #endregion
		
		public Nag()
		{
			this._Category = default(EntityRef<Category>);
			this._Login = default(EntityRef<Login>);
			OnCreated();
		}
		
		[Column(Storage="_NagsID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long NagsID
		{
			get
			{
				return this._NagsID;
			}
			set
			{
				if ((this._NagsID != value))
				{
					this.OnNagsIDChanging(value);
					this.SendPropertyChanging();
					this._NagsID = value;
					this.SendPropertyChanged("NagsID");
					this.OnNagsIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_PosorNeg", DbType="Bit")]
		public System.Nullable<bool> PosorNeg
		{
			get
			{
				return this._PosorNeg;
			}
			set
			{
				if ((this._PosorNeg != value))
				{
					this.OnPosorNegChanging(value);
					this.SendPropertyChanging();
					this._PosorNeg = value;
					this.SendPropertyChanged("PosorNeg");
					this.OnPosorNegChanged();
				}
			}
		}
		
		[Column(Storage="_LoginID", DbType="BigInt")]
		public System.Nullable<long> LoginID
		{
			get
			{
				return this._LoginID;
			}
			set
			{
				if ((this._LoginID != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoginIDChanging(value);
					this.SendPropertyChanging();
					this._LoginID = value;
					this.SendPropertyChanged("LoginID");
					this.OnLoginIDChanged();
				}
			}
		}
		
		[Association(Name="Category_Nag", Storage="_Category", ThisKey="CategoryID", OtherKey="CatID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Nags.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Nags.Add(this);
						this._CategoryID = value.CatID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Login_Nag", Storage="_Login", ThisKey="LoginID", OtherKey="LoginID", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.Nags.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.Nags.Add(this);
						this._LoginID = value.LoginID;
					}
					else
					{
						this._LoginID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BlogReviews")]
	public partial class BlogReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _BlogReviewID;
		
		private System.Nullable<long> _BlogID;
		
		private string _Review;
		
		private System.Nullable<int> _Rate;
		
		private System.Nullable<long> _MemberID;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogReviewIDChanging(long value);
    partial void OnBlogReviewIDChanged();
    partial void OnBlogIDChanging(System.Nullable<long> value);
    partial void OnBlogIDChanged();
    partial void OnReviewChanging(string value);
    partial void OnReviewChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    partial void OnMemberIDChanging(System.Nullable<long> value);
    partial void OnMemberIDChanged();
    #endregion
		
		public BlogReview()
		{
			this._Member = default(EntityRef<Member>);
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[Column(Storage="_BlogReviewID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long BlogReviewID
		{
			get
			{
				return this._BlogReviewID;
			}
			set
			{
				if ((this._BlogReviewID != value))
				{
					this.OnBlogReviewIDChanging(value);
					this.SendPropertyChanging();
					this._BlogReviewID = value;
					this.SendPropertyChanged("BlogReviewID");
					this.OnBlogReviewIDChanged();
				}
			}
		}
		
		[Column(Storage="_BlogID", DbType="BigInt")]
		public System.Nullable<long> BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[Column(Storage="_Review", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[Column(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[Column(Storage="_MemberID", DbType="BigInt")]
		public System.Nullable<long> MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Association(Name="Member_BlogReview", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.BlogReviews.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.BlogReviews.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[Association(Name="Blog_BlogReview", Storage="_Blog", ThisKey="BlogID", OtherKey="BlogID", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogReviews.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogReviews.Add(this);
						this._BlogID = value.BlogID;
					}
					else
					{
						this._BlogID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _IDNumber;
		
		private string _EMail;
		
		private System.Nullable<int> _CountryID;
		
		private System.Nullable<int> _ProvID;
		
		private System.Nullable<int> _RegionID;
		
		private System.Nullable<long> _LoginID;
		
		private System.Nullable<int> _RanksID;
		
		private EntitySet<BlogReview> _BlogReviews;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Login> _Login;
		
		private EntityRef<Rank> _Rank;
		
		private EntityRef<PostalCode> _PostalCode;
		
		private EntityRef<Province> _Province;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnIDNumberChanging(string value);
    partial void OnIDNumberChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnProvIDChanging(System.Nullable<int> value);
    partial void OnProvIDChanged();
    partial void OnRegionIDChanging(System.Nullable<int> value);
    partial void OnRegionIDChanged();
    partial void OnLoginIDChanging(System.Nullable<long> value);
    partial void OnLoginIDChanged();
    partial void OnRanksIDChanging(System.Nullable<int> value);
    partial void OnRanksIDChanged();
    #endregion
		
		public Member()
		{
			this._BlogReviews = new EntitySet<BlogReview>(new Action<BlogReview>(this.attach_BlogReviews), new Action<BlogReview>(this.detach_BlogReviews));
			this._Country = default(EntityRef<Country>);
			this._Login = default(EntityRef<Login>);
			this._Rank = default(EntityRef<Rank>);
			this._PostalCode = default(EntityRef<PostalCode>);
			this._Province = default(EntityRef<Province>);
			OnCreated();
		}
		
		[Column(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Storage="_IDNumber", DbType="Char(13)")]
		public string IDNumber
		{
			get
			{
				return this._IDNumber;
			}
			set
			{
				if ((this._IDNumber != value))
				{
					this.OnIDNumberChanging(value);
					this.SendPropertyChanging();
					this._IDNumber = value;
					this.SendPropertyChanged("IDNumber");
					this.OnIDNumberChanged();
				}
			}
		}
		
		[Column(Storage="_EMail", DbType="VarChar(100)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProvID", DbType="Int")]
		public System.Nullable<int> ProvID
		{
			get
			{
				return this._ProvID;
			}
			set
			{
				if ((this._ProvID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvIDChanging(value);
					this.SendPropertyChanging();
					this._ProvID = value;
					this.SendPropertyChanged("ProvID");
					this.OnProvIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegionID", DbType="Int")]
		public System.Nullable<int> RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._PostalCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[Column(Storage="_LoginID", DbType="BigInt")]
		public System.Nullable<long> LoginID
		{
			get
			{
				return this._LoginID;
			}
			set
			{
				if ((this._LoginID != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoginIDChanging(value);
					this.SendPropertyChanging();
					this._LoginID = value;
					this.SendPropertyChanged("LoginID");
					this.OnLoginIDChanged();
				}
			}
		}
		
		[Column(Storage="_RanksID", DbType="Int")]
		public System.Nullable<int> RanksID
		{
			get
			{
				return this._RanksID;
			}
			set
			{
				if ((this._RanksID != value))
				{
					if (this._Rank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRanksIDChanging(value);
					this.SendPropertyChanging();
					this._RanksID = value;
					this.SendPropertyChanged("RanksID");
					this.OnRanksIDChanged();
				}
			}
		}
		
		[Association(Name="Member_BlogReview", Storage="_BlogReviews", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<BlogReview> BlogReviews
		{
			get
			{
				return this._BlogReviews;
			}
			set
			{
				this._BlogReviews.Assign(value);
			}
		}
		
		[Association(Name="Country_Member", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="Login_Member", Storage="_Login", ThisKey="LoginID", OtherKey="LoginID", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._LoginID = value.LoginID;
					}
					else
					{
						this._LoginID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		[Association(Name="Rank_Member", Storage="_Rank", ThisKey="RanksID", OtherKey="RankID", IsForeignKey=true)]
		public Rank Rank
		{
			get
			{
				return this._Rank.Entity;
			}
			set
			{
				Rank previousValue = this._Rank.Entity;
				if (((previousValue != value) 
							|| (this._Rank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._Rank.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._RanksID = value.RankID;
					}
					else
					{
						this._RanksID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank");
				}
			}
		}
		
		[Association(Name="PostalCode_Member", Storage="_PostalCode", ThisKey="RegionID", OtherKey="PostalCodeID", IsForeignKey=true)]
		public PostalCode PostalCode
		{
			get
			{
				return this._PostalCode.Entity;
			}
			set
			{
				PostalCode previousValue = this._PostalCode.Entity;
				if (((previousValue != value) 
							|| (this._PostalCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PostalCode.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._PostalCode.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._RegionID = value.PostalCodeID;
					}
					else
					{
						this._RegionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PostalCode");
				}
			}
		}
		
		[Association(Name="Province_Member", Storage="_Province", ThisKey="ProvID", OtherKey="ProvID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._ProvID = value.ProvID;
					}
					else
					{
						this._ProvID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogReviews(BlogReview entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_BlogReviews(BlogReview entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[Table(Name="dbo.Blogs")]
	public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _BlogID;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private string _BlogDescription;
		
		private string _Blog1;
		
		private EntitySet<BlogReview> _BlogReviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIDChanging(long value);
    partial void OnBlogIDChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnBlogDescriptionChanging(string value);
    partial void OnBlogDescriptionChanged();
    partial void OnBlog1Changing(string value);
    partial void OnBlog1Changed();
    #endregion
		
		public Blog()
		{
			this._BlogReviews = new EntitySet<BlogReview>(new Action<BlogReview>(this.attach_BlogReviews), new Action<BlogReview>(this.detach_BlogReviews));
			OnCreated();
		}
		
		[Column(Storage="_BlogID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_BlogDescription", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string BlogDescription
		{
			get
			{
				return this._BlogDescription;
			}
			set
			{
				if ((this._BlogDescription != value))
				{
					this.OnBlogDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BlogDescription = value;
					this.SendPropertyChanged("BlogDescription");
					this.OnBlogDescriptionChanged();
				}
			}
		}
		
		[Column(Name="Blog", Storage="_Blog1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Blog1
		{
			get
			{
				return this._Blog1;
			}
			set
			{
				if ((this._Blog1 != value))
				{
					this.OnBlog1Changing(value);
					this.SendPropertyChanging();
					this._Blog1 = value;
					this.SendPropertyChanged("Blog1");
					this.OnBlog1Changed();
				}
			}
		}
		
		[Association(Name="Blog_BlogReview", Storage="_BlogReviews", ThisKey="BlogID", OtherKey="BlogID")]
		public EntitySet<BlogReview> BlogReviews
		{
			get
			{
				return this._BlogReviews;
			}
			set
			{
				this._BlogReviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogReviews(BlogReview entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogReviews(BlogReview entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatID;
		
		private string _CatName;
		
		private string _CatDescription;
		
		private EntitySet<Nag> _Nags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnCatNameChanging(string value);
    partial void OnCatNameChanged();
    partial void OnCatDescriptionChanging(string value);
    partial void OnCatDescriptionChanged();
    #endregion
		
		public Category()
		{
			this._Nags = new EntitySet<Nag>(new Action<Nag>(this.attach_Nags), new Action<Nag>(this.detach_Nags));
			OnCreated();
		}
		
		[Column(Storage="_CatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[Column(Storage="_CatName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CatName
		{
			get
			{
				return this._CatName;
			}
			set
			{
				if ((this._CatName != value))
				{
					this.OnCatNameChanging(value);
					this.SendPropertyChanging();
					this._CatName = value;
					this.SendPropertyChanged("CatName");
					this.OnCatNameChanged();
				}
			}
		}
		
		[Column(Storage="_CatDescription", DbType="VarChar(250)")]
		public string CatDescription
		{
			get
			{
				return this._CatDescription;
			}
			set
			{
				if ((this._CatDescription != value))
				{
					this.OnCatDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CatDescription = value;
					this.SendPropertyChanged("CatDescription");
					this.OnCatDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Category_Nag", Storage="_Nags", ThisKey="CatID", OtherKey="CategoryID")]
		public EntitySet<Nag> Nags
		{
			get
			{
				return this._Nags;
			}
			set
			{
				this._Nags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nags(Nag entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Nags(Nag entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _CountryName;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<Province> _Provinces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Country()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._Provinces = new EntitySet<Province>(new Action<Province>(this.attach_Provinces), new Action<Province>(this.detach_Provinces));
			OnCreated();
		}
		
		[Column(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryName", DbType="VarChar(100)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[Association(Name="Country_Member", Storage="_Members", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[Association(Name="Country_Province", Storage="_Provinces", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Province> Provinces
		{
			get
			{
				return this._Provinces;
			}
			set
			{
				this._Provinces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Provinces(Province entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Provinces(Province entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Login")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _LoginID;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<Nag> _Nags;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginIDChanging(long value);
    partial void OnLoginIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Login()
		{
			this._Nags = new EntitySet<Nag>(new Action<Nag>(this.attach_Nags), new Action<Nag>(this.detach_Nags));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[Column(Storage="_LoginID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long LoginID
		{
			get
			{
				return this._LoginID;
			}
			set
			{
				if ((this._LoginID != value))
				{
					this.OnLoginIDChanging(value);
					this.SendPropertyChanging();
					this._LoginID = value;
					this.SendPropertyChanged("LoginID");
					this.OnLoginIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Association(Name="Login_Nag", Storage="_Nags", ThisKey="LoginID", OtherKey="LoginID")]
		public EntitySet<Nag> Nags
		{
			get
			{
				return this._Nags;
			}
			set
			{
				this._Nags.Assign(value);
			}
		}
		
		[Association(Name="Login_Member", Storage="_Members", ThisKey="LoginID", OtherKey="LoginID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nags(Nag entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_Nags(Nag entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
	}
	
	[Table(Name="dbo.Rank")]
	public partial class Rank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RankID;
		
		private string _RankName;
		
		private string _Description;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRankIDChanging(int value);
    partial void OnRankIDChanged();
    partial void OnRankNameChanging(string value);
    partial void OnRankNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Rank()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[Column(Storage="_RankID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RankID
		{
			get
			{
				return this._RankID;
			}
			set
			{
				if ((this._RankID != value))
				{
					this.OnRankIDChanging(value);
					this.SendPropertyChanging();
					this._RankID = value;
					this.SendPropertyChanged("RankID");
					this.OnRankIDChanged();
				}
			}
		}
		
		[Column(Storage="_RankName", DbType="NVarChar(50)")]
		public string RankName
		{
			get
			{
				return this._RankName;
			}
			set
			{
				if ((this._RankName != value))
				{
					this.OnRankNameChanging(value);
					this.SendPropertyChanging();
					this._RankName = value;
					this.SendPropertyChanged("RankName");
					this.OnRankNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Rank_Member", Storage="_Members", ThisKey="RankID", OtherKey="RanksID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Rank = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Rank = null;
		}
	}
	
	[Table(Name="dbo.PostalCode")]
	public partial class PostalCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostalCodeID;
		
		private int _ProvID;
		
		private string _AreaName;
		
		private decimal _PostalCodeStart;
		
		private decimal _PostalCodeEnd;
		
		private EntitySet<Member> _Members;
		
		private EntityRef<Province> _Province;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostalCodeIDChanging(int value);
    partial void OnPostalCodeIDChanged();
    partial void OnProvIDChanging(int value);
    partial void OnProvIDChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    partial void OnPostalCodeStartChanging(decimal value);
    partial void OnPostalCodeStartChanged();
    partial void OnPostalCodeEndChanging(decimal value);
    partial void OnPostalCodeEndChanged();
    #endregion
		
		public PostalCode()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._Province = default(EntityRef<Province>);
			OnCreated();
		}
		
		[Column(Storage="_PostalCodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PostalCodeID
		{
			get
			{
				return this._PostalCodeID;
			}
			set
			{
				if ((this._PostalCodeID != value))
				{
					this.OnPostalCodeIDChanging(value);
					this.SendPropertyChanging();
					this._PostalCodeID = value;
					this.SendPropertyChanged("PostalCodeID");
					this.OnPostalCodeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProvID", DbType="Int NOT NULL")]
		public int ProvID
		{
			get
			{
				return this._ProvID;
			}
			set
			{
				if ((this._ProvID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvIDChanging(value);
					this.SendPropertyChanging();
					this._ProvID = value;
					this.SendPropertyChanged("ProvID");
					this.OnProvIDChanged();
				}
			}
		}
		
		[Column(Storage="_AreaName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this.OnAreaNameChanging(value);
					this.SendPropertyChanging();
					this._AreaName = value;
					this.SendPropertyChanged("AreaName");
					this.OnAreaNameChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCodeStart", DbType="Decimal(5,0) NOT NULL")]
		public decimal PostalCodeStart
		{
			get
			{
				return this._PostalCodeStart;
			}
			set
			{
				if ((this._PostalCodeStart != value))
				{
					this.OnPostalCodeStartChanging(value);
					this.SendPropertyChanging();
					this._PostalCodeStart = value;
					this.SendPropertyChanged("PostalCodeStart");
					this.OnPostalCodeStartChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCodeEnd", DbType="Decimal(5,0) NOT NULL")]
		public decimal PostalCodeEnd
		{
			get
			{
				return this._PostalCodeEnd;
			}
			set
			{
				if ((this._PostalCodeEnd != value))
				{
					this.OnPostalCodeEndChanging(value);
					this.SendPropertyChanging();
					this._PostalCodeEnd = value;
					this.SendPropertyChanged("PostalCodeEnd");
					this.OnPostalCodeEndChanged();
				}
			}
		}
		
		[Association(Name="PostalCode_Member", Storage="_Members", ThisKey="PostalCodeID", OtherKey="RegionID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[Association(Name="Province_PostalCode", Storage="_Province", ThisKey="ProvID", OtherKey="ProvID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.PostalCodes.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.PostalCodes.Add(this);
						this._ProvID = value.ProvID;
					}
					else
					{
						this._ProvID = default(int);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.PostalCode = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.PostalCode = null;
		}
	}
	
	[Table(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvID;
		
		private System.Nullable<int> _CountryID;
		
		private string _ProvName;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<PostalCode> _PostalCodes;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvIDChanging(int value);
    partial void OnProvIDChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnProvNameChanging(string value);
    partial void OnProvNameChanged();
    #endregion
		
		public Province()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._PostalCodes = new EntitySet<PostalCode>(new Action<PostalCode>(this.attach_PostalCodes), new Action<PostalCode>(this.detach_PostalCodes));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_ProvID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvID
		{
			get
			{
				return this._ProvID;
			}
			set
			{
				if ((this._ProvID != value))
				{
					this.OnProvIDChanging(value);
					this.SendPropertyChanging();
					this._ProvID = value;
					this.SendPropertyChanged("ProvID");
					this.OnProvIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProvName", DbType="VarChar(50)")]
		public string ProvName
		{
			get
			{
				return this._ProvName;
			}
			set
			{
				if ((this._ProvName != value))
				{
					this.OnProvNameChanging(value);
					this.SendPropertyChanging();
					this._ProvName = value;
					this.SendPropertyChanged("ProvName");
					this.OnProvNameChanged();
				}
			}
		}
		
		[Association(Name="Province_Member", Storage="_Members", ThisKey="ProvID", OtherKey="ProvID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[Association(Name="Province_PostalCode", Storage="_PostalCodes", ThisKey="ProvID", OtherKey="ProvID")]
		public EntitySet<PostalCode> PostalCodes
		{
			get
			{
				return this._PostalCodes;
			}
			set
			{
				this._PostalCodes.Assign(value);
			}
		}
		
		[Association(Name="Country_Province", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Provinces.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Provinces.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_PostalCodes(PostalCode entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_PostalCodes(PostalCode entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
}
#pragma warning restore 1591
